AWSTemplateFormatVersion: '2010-09-09'
Description: 'Template to install CloudWatchAgent on amazon linux. It was validated on amazon linux 2'
Parameters:
  KeyName:
    Description: Name of an existing EC2 KeyPair to enable SSH access to the instance
    Type: AWS::EC2::KeyPair::KeyName
    ConstraintDescription: must be the name of an existing EC2 KeyPair.
    Default: k2
  InstanceType:
    Description: EC2 instance type
    Type: String
    Default: t3.micro
    ConstraintDescription: must be a valid EC2 instance type.
  LatestAmiId:
    Description: Managed AMI ID for EC2 Instance
    Type: 'AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>'
    Default: '/aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2'
  SSHLocation:
    Description: The IP address range that can be used to SSH to the EC2 instances
    Type: String
    MinLength: '9'
    MaxLength: '18'
    Default: 0.0.0.0/0
    AllowedPattern: (\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})
    ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x.
  ProjectDeploymentName:
    Type: String
    Default: asg-ec2-cfn-init
  AsgSize:
    Type: Number
    Default: 2

Resources:
  Ec2Role:
    Description: Role to download app artifact from S3
    Properties:
      RoleName: !Sub ${ProjectDeploymentName}-role
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/CloudWatchAgentServerPolicy
        - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
    Type: 'AWS::IAM::Role'

  Ec2InstanceProfile:
    Properties:
      InstanceProfileName: !Sub ${ProjectDeploymentName}-instance-profile
      Roles: [ !Ref Ec2Role ]
    Type: 'AWS::IAM::InstanceProfile'

  AutoScalingGroup:
    Properties:
      HealthCheckType: ELB
      HealthCheckGracePeriod: 300
      MinSize: !Ref AsgSize
      MaxSize: !Ref AsgSize
      AvailabilityZones: !GetAZs
      LaunchTemplate:
        LaunchTemplateId: !Ref Ec2LaunchTemplate
        Version: !GetAtt Ec2LaunchTemplate.LatestVersionNumber
      Tags:
        - Key: ProjectDeploymentName
          Value: !Ref ProjectDeploymentName
          PropagateAtLaunch: true
    Type: 'AWS::AutoScaling::AutoScalingGroup'

  Ec2LaunchTemplate:
    Metadata:
      AWS::CloudFormation::Init:
        configSets: # configSets allows to segregate between use cases, one for initial start, one for update
          create:
            - 00_install-pre-requisites
            - 01_a_config-cfn-hup
            - 01_b_check_cfn_hup
            - 02_install-amazon-codedeploy-agent
            - 03_check-amazon-codedeploy-agent
            - 04_install-amazon-cloudwatch-agent
            - 05_config-amazon-cloudwatch-agent
            - 06_restart_amazon-cloudwatch-agent
            - 07_check_amazon-ssm-agent
          update:
            - 01_b_check_cfn_hup
            - 03_check-amazon-codedeploy-agent
            - 05_config-amazon-cloudwatch-agent
            - 06_restart_amazon-cloudwatch-agent
            - 07_check_amazon-ssm-agent
        00_install-pre-requisites:
          packages:
            yum:
              ruby: [ ]
              wget: [ ]
              systemd: [ ]
        01_a_config-cfn-hup:
          files:
            # cfn-hup daemon configuration
            /etc/cfn/cfn-hup.conf:
              content: !Sub |
                [main]
                stack=${AWS::StackName}
                region=${AWS::Region}
                interval=1
                verbose=true
              mode: '000400'
              owner: 'root'
              group: 'root'
            # Hooks configuration for template update.
            # Cfn-hup setting file to monitor changes in Metadata section
            # of Resources.Ec2LaunchTemplate resource in template.
            /etc/cfn/hooks.d/cfn-auto-reloader.conf:
              content: !Sub |
                [cfn-auto-reloader-hook]
                triggers=post.update
                path=Resources.Ec2LaunchTemplate.Metadata.AWS::CloudFormation::Init
                action=/opt/aws/bin/cfn-init -v --stack ${AWS::StackId} --region ${AWS::Region} --resource Ec2LaunchTemplate --configsets update
                runas=root
              mode: '000400'
              owner: 'root'
              group: 'root'
            # cfn-hup systemd service definition
            "/lib/systemd/system/cfn-hup.service":
              content: !Sub |
                [Unit]
                Description=cfn-hup daemon
                [Service]
                Type=simple
                ExecStart=/opt/aws/bin/cfn-hup
                Restart=always
                [Install]
                WantedBy=multi-user.target
        01_b_check_cfn_hup:
          commands:
            01enable_cfn_hup:
              command: systemctl enable cfn-hup.service
            02start_cfn_hup:
              command: systemctl start cfn-hup.service
        02_install-amazon-codedeploy-agent:
          files:
            '/home/ec2-user/install':
              source: !Sub https://aws-codedeploy-${AWS::Region}.s3.${AWS::Region}.amazonaws.com/latest/install
              mode: '000755' # should be quoted
          commands:
            00_install_agent:
              command: ./install auto
              cwd: /home/ec2-user/
        03_check-amazon-codedeploy-agent:
          services:
            sysvinit:
              codedeploy-agent:
                enabled: true
                ensureRunning: true
        04_install-amazon-cloudwatch-agent:
          commands:
            01_download_cloudwatch_agent:
              command: rpm -Uvh https://s3.amazonaws.com/amazoncloudwatch-agent/amazon_linux/amd64/latest/amazon-cloudwatch-agent.rpm
        05_config-amazon-cloudwatch-agent:
          files:
            '/opt/aws/amazon-cloudwatch-agent/etc/amazon-cloudwatch-agent.json':
              content: !Sub |
                {
                  "agent": {
                    "metrics_collection_interval": 10,
                    "logfile": "/opt/aws/amazon-cloudwatch-agent/logs/amazon-cloudwatch-agent.log"
                  },
                  "logs": {
                    "logs_collected": {
                      "files": {
                        "collect_list": [
                          {
                            "file_path": "/var/log/messages",
                            "log_group_name": "ec2-var-log-messages",
                            "log_stream_name": "{instance_id}",
                            "timezone": "UTC"
                          },
                          {
                            "file_path": "/var/log/aws/codedeploy-agent/codedeploy-agent.log",
                            "log_group_name": "ec2-codedeploy-agent",
                            "log_stream_name": "{instance_id}",
                            "timezone": "UTC"
                          }
                        ]
                      }
                    },
                    "log_stream_name": "my_log_stream_name",
                    "force_flush_interval": 15
                  }
                }
        06_restart_amazon-cloudwatch-agent:
          commands:
            01_stop_service:
              command: /opt/aws/amazon-cloudwatch-agent/bin/amazon-cloudwatch-agent-ctl -a stop
            02_start_service:
              command: /opt/aws/amazon-cloudwatch-agent/bin/amazon-cloudwatch-agent-ctl -a fetch-config -m ec2 -c file:/opt/aws/amazon-cloudwatch-agent/etc/amazon-cloudwatch-agent.json -s
        07_check_amazon-ssm-agent:
          services:
            sysvinit:
              amazon-ssm-agent:
                enabled: true
                ensureRunning: true
    Properties:
      LaunchTemplateName: !Ref ProjectDeploymentName
      LaunchTemplateData:
        IamInstanceProfile:
          Arn: !GetAtt Ec2InstanceProfile.Arn
        ImageId: !Ref LatestAmiId
        InstanceType: !Ref InstanceType
        KeyName: !Ref KeyName
        SecurityGroupIds:
          - !GetAtt InstanceSecurityGroup.GroupId
        UserData:
          Fn::Base64: !Sub |
            #!/bin/bash
            yum update -y aws-cfn-bootstrap
            /opt/aws/bin/cfn-init -v --stack ${AWS::StackId} --resource Ec2LaunchTemplate --region ${AWS::Region} --configsets create
            /opt/aws/bin/cfn-signal -e $? --stack ${AWS::StackId} --resource Ec2LaunchTemplate --region ${AWS::Region}
    CreationPolicy:
      ResourceSignal:
        Count: !Ref AsgSize
        Timeout: "PT15M"
    Type: 'AWS::EC2::LaunchTemplate'

  InstanceSecurityGroup:
    Properties:
      GroupDescription: Enable SSH access via port 22
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '22'
          ToPort: '22'
          CidrIp:
            Ref: SSHLocation
    Type: 'AWS::EC2::SecurityGroup'